#include "SR04.h"
#include <Servo.h>
#define TRIG_PIN 12
#define ECHO_PIN 11
#define ROBOT_DELAY 100
#define MIN_DIST 40
SR04 sr04 = SR04(ECHO_PIN,TRIG_PIN);
long dist_left, dist_right, dist_forward;
bool right_close, left_close;
Servo myservo;  // create servo object to control a servo
// twelve servo objects can be created on most boards
int pos = 0;    // variable to store the servo position
const int LeftMotorForward = 8;
const int LeftMotorBackward = 7;
const int RightMotorForward = 4;
const int RightMotorBackward = 5;
const int enA = 6;
const int enB = 3;
#define maximum_distance 200
boolean goesForward = false;
String right = "Right: ";
String left = "Left: ";
String forward = "Fwd: ";

//int distance = 100;

void setup() {
  Serial.begin(9600);
  pinMode(RightMotorForward, OUTPUT);
  pinMode(LeftMotorForward, OUTPUT);
  pinMode(LeftMotorBackward, OUTPUT);
  pinMode(RightMotorBackward, OUTPUT);
  pinMode(enA, OUTPUT);
  pinMode(enB, OUTPUT);
  myservo.attach(9);
  myservo.write(90);
}

void loop() {
  goForward();
  delay(ROBOT_DELAY);
  dist_forward = getForwardDist();
  Serial.print(forward + dist_forward);
  if(dist_forward < MIN_DIST) {
      stopRobot();
      delay(ROBOT_DELAY);
      dist_left = getLeftDist();
      Serial.print(left + dist_left);
      delay(ROBOT_DELAY);
      dist_right = getRightDist();
      Serial.print(right + dist_right);
      if(dist_left > MIN_DIST) {
          turnLeft();
          delay(ROBOT_DELAY);
          getForwardDist();
        } else if(dist_right > MIN_DIST) {
          turnRight();
          delay(ROBOT_DELAY);
          getForwardDist();
        } else {
          goBackward();
          dist_left = getLeftDist();
          delay(ROBOT_DELAY);
          dist_right = getRightDist();
          if(dist_left > MIN_DIST) {
              turnLeft();
              delay(ROBOT_DELAY);
              getForwardDist();
          } else if(dist_right > MIN_DIST) {
              turnRight();
              delay(ROBOT_DELAY);
              getForwardDist();
          }
        }
    } 
}

long getLeftDist() {
    myservo.write(180);
    delay(ROBOT_DELAY);
    return sr04.Distance();
}

long getForwardDist() {
    myservo.write(90);
    delay(ROBOT_DELAY);
    return sr04.Distance();
}

long getRightDist() {
    myservo.write(0);
    delay(ROBOT_DELAY);
    return sr04.Distance();
}

void stopRobot() {
  analogWrite(enA, 0);
  analogWrite(enB, 0);
  digitalWrite(RightMotorForward, LOW);
  digitalWrite(LeftMotorForward, LOW);
  digitalWrite(RightMotorBackward, LOW);
  digitalWrite(LeftMotorBackward, LOW);
  delay(ROBOT_DELAY);
}

void moveRobot() {
  for (int i = 123; i >= 80; --i) {
    analogWrite(enA, i);
    analogWrite(enB, i);
    delay(20);
  }
}

void turnRight() {
  digitalWrite(LeftMotorForward, HIGH);
  digitalWrite(RightMotorBackward, HIGH);
  digitalWrite(LeftMotorBackward, LOW);
  digitalWrite(RightMotorForward, LOW);
  moveRobot();
}

void turnLeft() {
  digitalWrite(LeftMotorForward, LOW);
  digitalWrite(RightMotorBackward, LOW);
  digitalWrite(LeftMotorBackward, HIGH);
  digitalWrite(RightMotorForward, HIGH);
  moveRobot();
}

void goBackward() {
  digitalWrite(LeftMotorForward, LOW);
  digitalWrite(RightMotorForward, LOW); 
  digitalWrite(LeftMotorBackward, HIGH);
  digitalWrite(RightMotorBackward, HIGH); 
  moveRobot();
}

void goForward() {
  digitalWrite(LeftMotorForward, HIGH);
  digitalWrite(RightMotorForward, HIGH); 
  digitalWrite(LeftMotorBackward, LOW);
  digitalWrite(RightMotorBackward, LOW); 
  moveRobot();
}
